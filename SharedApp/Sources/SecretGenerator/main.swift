//
//  File.swift
//  CineFlowPackage
//
//  Created by sanlorng char on 2025/9/27.
//

import Foundation
import ArgumentParser

struct SecretGenerator: ParsableCommand {
    
    @Argument(help: "The path to the input .env file.")
    var inputFile: String
    
    @Argument(help: "The path to the output Secret.swift file.")
    var outputFile: String
    
    func run() throws {
        // --- 1. 读取输入文件 ---
        let inputURL = URL(fileURLWithPath: inputFile)
        guard let envContent = try? String(contentsOf: inputURL, encoding: .utf8) else {
            // 如果 .env 文件不存在，创建一个空的 Secrets 枚举以避免编译失败
            let emptyContent = """
                // This file is generated by a build plugin. Do not edit.
                // Warning: .env file not found.
                enum Secrets {}
                """
            try emptyContent.write(to: URL(fileURLWithPath: outputFile), atomically: true, encoding: .utf8)
            print("warning: .env file not found at \(inputFile). Generated an empty Secrets.swift.")
            return
        }
        
        // --- 2. 解析 .env 内容并生成 Swift 代码 ---
        var swiftCode = """
            // This file is generated by a build plugin. Do not edit.
            import Foundation
            
            enum Secrets {
            
            """
        
        let lines = envContent.split(whereSeparator: \.isNewline)
        for line in lines {
            // 跳过注释和空行
            let trimmedLine = line.trimmingCharacters(in: .whitespaces)
            if trimmedLine.isEmpty || trimmedLine.hasPrefix("#") {
                continue
            }
            
            // 分割 KEY=VALUE
            guard let separatorIndex = trimmedLine.firstIndex(of: "=") else { continue }
            let key = String(trimmedLine[..<separatorIndex])
            let value = String(trimmedLine[trimmedLine.index(after: separatorIndex)...])
            
            // 将 SNAKE_CASE 转换为 camelCase
            let swiftKey = toCamelCase(key)
            
            // 添加到 Swift 代码中，注意转义引号
            swiftCode += "    static let \(swiftKey) = \"\(value)\"\n"
        }
        
        swiftCode += "}\n"
        
        // --- 3. 写入输出文件 ---
        let outputURL = URL(fileURLWithPath: outputFile)
        try swiftCode.write(to: outputURL, atomically: true, encoding: .utf8)
        
        print("Successfully generated Secret.swift at \(outputFile)")
    }
    
    /// 辅助函数：将 API_KEY 转换为 apiKey
    private func toCamelCase(_ string: String) -> String {
        return string.lowercased()
            .split(separator: "_")
            .enumerated()
            .map { index, part in
                index == 0 ? String(part) : String(part).capitalized
            }
            .joined()
    }
}

SecretGenerator.main()
